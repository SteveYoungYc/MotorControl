=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "Bit1"      (component BitIO)
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Bit2"      (component BitIO)
   - Bit2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "TI1"       (component TimerInt)
   - TI1_Enable -This method enables the component - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>)
                .
   - TI1_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "eFlexPWM"  (component Init_eFlexPWM_56800)
   - eFlexPWM_Init -This method initializes registers of the eFlexPWM module according to the Peripheral Initialization 
                settings. Call this method in user code to initialize the module. By default, the method is called by PE 
                automatically; see "Call Init method" property of the component for more details.

Module "Cap1"      (component Capture)
   - Cap1_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Cap1_Disable -This method disables the component - it stops the capture. No events will be generated.
   - Cap1_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Cap1_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General Info>)
                . The method does not return valid value after initialization or after <Reset> until new capture event (even if 
                the returned Error code is ERR_OK).

Module "Cap2"      (component Capture)
   - Cap2_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Cap2_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General Info>)
                . The method does not return valid value after initialization or after <Reset> until new capture event (even if 
                the returned Error code is ERR_OK).

Module "PWMC1"     (component PWMMC)
   - PWMC1_SetDuty -Setting duty (value) register(s) of selected channel. The value is loaded after calling <Load> method.   [ 
                Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   Setting is 
                valid for actual speed mode only, initial value is restored after speed mode change.   [ Version specific 
                information for Freescale 56800/E derivatives - eFlexPWM device ]   Duty register(s) value is not affected 
                during speed mode change. It should be handled by the user code.
   - PWMC1_Load -Apply last setting of the methods <SetDuty>, <SetDutyPercent>, both <SetRatio*>, <SetPeriod> and 
                <SetPrescaler>.
   - PWMC1_SetRatio16 -This method sets a new duty-cycle ratio for selected channel. The value is loaded after calling <Load> 
                method.   [ Version specific information for Freescale 56800/E and HC08 and HCS12 and HCS12X derivatives ]   
                Setting is valid for actual speed mode only, initial value is restored after speed mode change.   [ Version 
                specific information for Freescale 56800/E derivatives - eFlexPWM device ]   Settings is not affected during 
                speed mode change. It should be handled by the user code.
   - PWMC1_OutputPadEnable -Method enables output pads.
   - PWMC1_OutputPadDisable -Method disables output pads.

Module "Cap3"      (component Capture)
   - Cap3_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - Cap3_Disable -This method disables the component - it stops the capture. No events will be generated.
   - Cap3_EnableEvent -This method enables the events. This method is available only if any event is selected.
   - Cap3_Reset -This method resets the counter register (see implementation note in <General Info>).
   - Cap3_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General Info>)
                . The method does not return valid value after initialization or after <Reset> until new capture event (even if 
                the returned Error code is ERR_OK).

Module "FMSTR1"    (component FreeMaster)
   - FMSTR1_Poll -In the poll-driven or short interrupt modes, this function handles the protocol decoding and execution. In 
                the poll-driven mode, this function also handles the SCI communication. In the long interrupt mode, this 
                function compiles as an empty function and may still be called.

Module "TI2"       (component TimerInt)

Module "Cpu"       (component 56F8257)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.   For more information about the wait mode see this CPU documentation.   
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.   For more information about the stop mode see this CPU documentation.

===================================================================================
